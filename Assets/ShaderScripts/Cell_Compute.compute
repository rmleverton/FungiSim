// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSNeighbours

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//
//struct Cell_Struct
//{
//	int cell_id;
//	int cell_type;
//	float cell_value;
//	Buffer<int> cell_neighbours;
//	Buffer<int> cell_child;
//	int cell_parent;
//	float4 cell_colour;
//
//
//	//public Cell_Struct(int cell_id, int cell_type, float cell_value, int[] cell_neighbours)
//	//{
//	//	this.cell_id = cell_id;
//	//	this.cell_type = cell_type; //0=background, 1=node, 2=child, 3=bone
//	//	this.cell_value = cell_value;
//	//	this.cell_neighbours = cell_neighbours;
//	//	this.cell_child = Enumerable.Repeat(-1, 26).ToArray();
//	//	this.cell_parent = -1;
//	//}
//};


RWStructuredBuffer<int> cell_type_buffer;
RWStructuredBuffer<float> cell_value_buffer;
RWStructuredBuffer<int> cell_neighbours_buffer;
RWStructuredBuffer<int> cell_children_buffer;
RWStructuredBuffer<int> cell_parent_buffer;
RWStructuredBuffer<float4> cell_colour_buffer;

//StructuredBuffer<Cell_Struct> cells_buffer;
//RWStructuredBuffer<Cell_Struct> neighbours_buffer;

int3 grid_res;
uint my_id;
uint my_neighbour_id;

void Change_Colour(uint my_id) {
	int cell_type = cell_type_buffer[my_id];
	float4 colour;

	switch (cell_type)
	{
	case 0:
	{
		colour = float4(0, 1, 0, 0);
		break;
	}
	case 1:
	{

		colour = float4(1, 0, 0, 1);
		break;
	}
	case 2:
	{
		colour = float4(0, 0, 1, 1);
		break;
	}
	case 3:
	{
		colour = float4(1, 1, 1, 1);
		break;
	}
	default:
	{
		colour = float4(0, 0, 0, 0);
		break;
	}
	}

	cell_colour_buffer[my_id] = colour;
}

void Create_Node() {
	for (int i = 0; i < 26; i++) {
		int neighbourhood_id = my_neighbour_id + i;
		int neighbour_id = cell_neighbours_buffer[neighbourhood_id];
		if (cell_type_buffer[neighbour_id] == 1 || cell_type_buffer[neighbour_id] == 3) {
			return;
		}
	}

	cell_type_buffer[my_id] = 1;
	//make parent a bone
	//remove this from parent
	cell_parent_buffer[my_id] = -1;

}

void Create_Child() {
	for (int i = 0; i < 26; i++) {
		int neighbourhood_id = my_neighbour_id + i;
		int neighbour_id = cell_neighbours_buffer[neighbourhood_id];
		if (cell_type_buffer[neighbour_id] == 0 && cell_value_buffer[neighbour_id] > 0) {
			
			if (cell_type_buffer[my_id] == 2) {
				if (i > 0) {
					return;
				}
			}


			cell_type_buffer[neighbour_id] = 2;
			cell_parent_buffer[neighbour_id] = my_id;
			cell_value_buffer[neighbour_id] += cell_type_buffer[my_id] * 0.5;
			cell_type_buffer[my_id] *= 0.5;
			
			for (int j = 0; j < 26; j++) {
				if (cell_children_buffer[my_neighbour_id + i] == -1) {
					cell_children_buffer[my_neighbour_id + i] = neighbour_id;

					break;
				}
			}
			
			
			return;
		}
	}
}

void Cell_Death() {
	if (cell_type_buffer[my_id] == 2) {
		cell_type_buffer[my_id] = 0;

		for (int i = 0; i < 26; i++) {
			int child_id = cell_children_buffer[my_neighbour_id + i];
			cell_children_buffer[my_neighbour_id + i] = -1;

			if (child_id == -1) {
				continue;
			}
			else {
				cell_parent_buffer[child_id] = -1;
			}
		}

		cell_parent_buffer[my_id] = -1;
	}

	if (cell_type_buffer[my_id] == 1) {
		cell_type_buffer[my_id] = 3;
	}
}

float grow_cell_value;
float cell_upkeep_value;
float parent_pass_scalar;
float node_transform_value;
Buffer<float> initial_cell_values;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	my_id = (id.x * grid_res[1] + id.y + (id.z * grid_res[0] * grid_res[1]));
	my_neighbour_id = my_id * 26;

	if (cell_value_buffer[my_id] <= 0) {
		Cell_Death();
	}


	if (cell_value_buffer[my_id] > grow_cell_value) {
		Create_Child();
	}

	if(cell_type_buffer[my_id] == 2)
	{
		int parent_id = cell_parent_buffer[my_id];
		cell_value_buffer[parent_id] += cell_value_buffer[my_id] * parent_pass_scalar;

			if (cell_value_buffer[my_id] >= node_transform_value) {
				cell_type_buffer[my_id] = 1;
			}
	}

	

	cell_value_buffer[my_id] *= initial_cell_values[my_id];
	cell_value_buffer[my_id] -= cell_upkeep_value;
	Change_Colour(my_id);

}


RWStructuredBuffer<int> my_neighbours;
RWStructuredBuffer<float> neighbour_values;

[numthreads(1, 1, 1)]
void CSNeighbours(uint3 id : SV_DispatchThreadID)
{
	//uint my_id = (id.x * grid_res[1] + id.y + (id.z * grid_res[0] * grid_res[1]));
	//uint my_neighbour_id = my_id * 26;

	int negIndexCount = 0;
	float abVal = 0;
	
	[unroll(26)]
	for (int i = 0; i < 26; i++) {
		my_neighbours[i] = cell_neighbours_buffer[my_neighbour_id + i];

	}

	for (int a = 0; a < 25; a++) {
		for (int b = 0; b < 25 - a; b++) {
			int indexA = my_neighbours[b];
			int indexB = my_neighbours[b + 1];

			float valueA = cell_value_buffer[indexA];
			float valueB = cell_value_buffer[indexB];

			if (valueA < valueB){
				int temp = my_neighbours[b];
				my_neighbours[b] = my_neighbours[b + 1];
				my_neighbours[b + 1] = temp;
				}
		}
	}

	[unroll(26)]
	for (int i = 0; i < 26; i++) {
		cell_neighbours_buffer[my_neighbour_id + i] = my_neighbours[i];

	}

}

